platform :ios, '15.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, run `flutter pub get` first."
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in Generated.xcconfig. Run `flutter pub get`."
end

require File.expand_path(File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper'), __FILE__)

# Sets up the Flutter engine & plugin pods properly
flutter_ios_podfile_setup

target 'Runner' do
  # Keep frameworks STATIC to avoid Pods_Runner linkage issues
  use_frameworks! :linkage => :static
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  # Add app-specific pods here if you ever need them
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    # Let Flutter add its required build settings (search paths, module maps, etc.)
    flutter_additional_ios_build_settings(target)

    target.build_configurations.each do |bc|
      bc.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      # Help simulators on Apple Silicon for certain pods
      bc.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      # Ensure header maps & non-modular includes so `Flutter/Flutter.h` resolves
      bc.build_settings['USE_HEADERMAP'] = 'YES'
      bc.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      bc.build_settings['SWIFT_VERSION'] = '5.0'
    end
  end
end